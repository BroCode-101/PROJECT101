Import necessary libraries

import pandas as pd

from sklearn.model_selection import train_test_split

from sklearn.linear_model import LogisticRegression

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score, roc_curve

import matplotlib.pyplot as plt

import seaborn as sns



# Load the dataset

# Replace 'your_dataset.csv' with the actual dataset file name

data = pd.read_csv('your_dataset.csv')



# Display the first few rows of the dataset

print("Dataset preview:")

print(data.head())



# Separate features and target variable

# Replace 'Target' with the actual name of the target column in your dataset

X = data.drop(columns=['Target'])  # Features

y = data['Target']  # Target



# Split the dataset into training and testing sets

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)



# Create a Logistic Regression model

model = LogisticRegression()



# Train the model

model.fit(X_train, y_train)



# Predict the target for the test set

y_pred = model.predict(X_test)



# Evaluate the model

accuracy = accuracy_score(y_test, y_pred)

print(f"Model Accuracy: {accuracy:.2f}")



# Print the confusion matrix

conf_matrix = confusion_matrix(y_test, y_pred)

print("\nConfusion Matrix:")

print(conf_matrix)



# Visualize the confusion matrix

plt.figure(figsize=(6, 4))

sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Class 0', 'Class 1'], yticklabels=['Class 0', 'Class 1'])

plt.xlabel('Predicted Label')

plt.ylabel('True Label')

plt.title('Confusion Matrix')

plt.show()



# Print the classification report

print("\nClassification Report:")

print(classification_report(y_test, y_pred))



# Calculate ROC AUC

y_pred_prob = model.predict_proba(X_test)[:, 1]

roc_auc = roc_auc_score(y_test, y_pred_prob)

print(f"ROC AUC Score: {roc_auc:.2f}")



# Plot ROC Curve

fpr, tpr, _ = roc_curve(y_test, y_pred_prob)

plt.plot(fpr, tpr, marker='.', label='Logistic Regression')

plt.plot([0, 1], [0, 1], linestyle='--', label='No Skill')

plt.xlabel('False Positive Rate')

plt.ylabel('True Positive Rate')

plt.title('ROC Curve')

plt.legend()

plt.show()



