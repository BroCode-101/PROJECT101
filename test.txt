rogram:

#include <stdio.h>

#include <limits.h> // For INT_MAX

#include <stdbool.h> // For boolean values

#define V 6 // Number of vertices

// Function to find the vertex with minimum distance

int minDistance(int dist[], bool visited[]) {

int min = INT_MAX, min_index;

for (int v = 0; v < V; v++) {

if (!visited[v] && dist[v] <= min) {

min = dist[v];

min_index = v;

}

}

return }

// Function to print the shortest distance and path

void printSolution(int dist[]) {

printf("Vertex\tDistance from Source\n");

for (int i = 0; i < V; i++)

printf("%d\t%d\n", i, dist[i]);

}

// Dijkstra's algorithm for OSPF

void dijkstra(int graph[V][V], int src) {

int dist[V]; // Distance from source to each vertex

bool visited[V]; // To track visited vertices

// Initialize distances and visited status

for (int i = 0; i < V; i++) {

dist[i] = INT_MAX;

visited[i] = false;

}

// Distance from source to itself is always 0

dist[src] = 0;

// Process all vertices

for (int count = 0; count < V - 1; count++) {

int u = minDistance(dist, visited); // Get the minimum distance vertex

visited[u] = true; // Mark vertex as processed

// Update distance for neighbors

for (int v = 0; v < V; v++) {

if (!visited[v] && graph[u][v] && dist[u] != INT_MAX

&& dist[u] + graph[u][v] < dist[v]) {

dist[v] = dist[u] + graph[u][v];

}

}

}

// Print the result

printSolution(dist);

}

// Main function

int main() {

// Graph represented as adjacency matrix

int graph[V][V] = {

{0, 10, 0, 0, 0, 11}, {10, 0, 18, 0, 0, 0}, {0, 18, 0, 6, 0, 0}, {0, 0, 6, 0, 9, 0}, {0, 0, 0, 9, 0, 11, 0, 0, 0, 4, 0}

};

int source = 0; // Set source vertex

// Apply OSPF algorithm

dijkstra(graph, source);

r
