import csv
import random
import math


def loadCsv(filename):
    with open(filename, "r") as file:
        lines = csv.reader(file)
        next(lines)  # Skip the header row
        dataset = []
        for row in lines:
            if len(row) == 0:  # Skip empty rows
                continue
            try:
                dataset.append([float(x) for x in row])  # Convert values to float
            except ValueError:
                print("Skipping invalid row:", row)  # Debugging message
    return dataset


def splitDataset(dataset, splitRatio):
    random.seed(42)  # Fix randomness for consistent results
    trainSize = int(len(dataset) * splitRatio)
    trainSet = []
    copy = list(dataset)
    while len(trainSet) < trainSize:
        index = random.randrange(len(copy))
        trainSet.append(copy.pop(index))
    return [trainSet, copy]


def separateByClass(dataset):
    separated = {}
    for vector in dataset:
        classValue = vector[-1]
        if classValue not in separated:
            separated[classValue] = []
        separated[classValue].append(vector)
    return separated


def mean(numbers):
    return sum(numbers) / float(len(numbers))


def stdev(numbers):
    if len(numbers) < 2:  # If only one number, return a small default variance
        return 1e-6  
    avg = mean(numbers)
    variance = sum([pow(x - avg, 2) for x in numbers]) / float(len(numbers) - 1)
    return math.sqrt(variance)


def summarize(dataset):
    summaries = [(mean(attribute), stdev(attribute)) for attribute in zip(*dataset)]
    del summaries[-1]  # Remove the class column summary
    return summaries


def summarizeByClass(dataset):
    separated = separateByClass(dataset)
    summaries = {classValue: summarize(instances) for classValue, instances in separated.items()}
    return summaries


def calculateProbability(x, mean, stdev):
    epsilon = 1e-6  # Prevent division by zero
    exponent = math.exp(-(math.pow(x - mean, 2) / (2 * math.pow(stdev + epsilon, 2))))
    return (1 / (math.sqrt(2 * math.pi) * (stdev + epsilon))) * exponent


def calculateClassProbabilities(summaries, inputVector):
    probabilities = {}
    for classValue, classSummaries in summaries.items():
        probabilities[classValue] = 1
        for i in range(len(classSummaries)):
            mean, stdev = classSummaries[i]
            x = inputVector[i]
            probabilities[classValue] *= calculateProbability(x, mean, stdev)
    return probabilities


def predict(summaries, inputVector):
    probabilities = calculateClassProbabilities(summaries, inputVector)
    bestLabel = max(probabilities, key=probabilities.get)
    return bestLabel


def getPredictions(summaries, testSet):
    return [predict(summaries, test) for test in testSet]


def getAccuracy(testSet, predictions):
    correct = sum(1 for i in range(len(testSet)) if testSet[i][-1] == predictions[i])
    return (correct / float(len(testSet))) * 100.0


def main():
    filename = 'data.csv'  # Ensure this file is in the correct directory
    splitRatio = 0.67  # 67% training, 33% testing
    dataset = loadCsv(filename)

    if not dataset:  # Check if dataset is empty
        print("Error: Dataset is empty or not loaded correctly.")
        return

    trainingSet, testSet = splitDataset(dataset, splitRatio)
    print(f'Split {len(dataset)} rows into train={len(trainingSet)} and test={len(testSet)} rows')

    summaries = summarizeByClass(trainingSet)

    # Ensure no class is left with a single sample
    for classValue, instances in separateByClass(trainingSet).items():
        if len(instances) < 2:
            print(f"Warning: Class {classValue} has only {len(instances)} instance(s). Standard deviation may cause issues.")

    predictions = getPredictions(summaries, testSet)

    accuracy = getAccuracy(testSet, predictions)
    print(f'Accuracy of the classifier is: {accuracy:.2f}%')


if __name__ == "__main__":
    main()
