import csv
import random
import math

# Load CSV file into a dataset
def loadCsv(filename):
    with open(filename, "r") as file:
        lines = csv.reader(file)
        next(lines)  # Skip the header row
        dataset = [[float(x) for x in row] for row in lines]
    return dataset

# Split dataset into training and test sets
def splitDataset(dataset, splitRatio):
    random.seed(42)  # Fix randomness for consistent results
    trainSize = int(len(dataset) * splitRatio)
    trainSet = []
    copy = list(dataset)
    while len(trainSet) < trainSize:
        index = random.randrange(len(copy))
        trainSet.append(copy.pop(index))
    return [trainSet, copy]

# Separate dataset by class
def separateByClass(dataset):
    separated = {}
    for vector in dataset:
        classValue = vector[-1]
        if classValue not in separated:
            separated[classValue] = []
        separated[classValue].append(vector)
    return separated

# Calculate mean of a list
def mean(numbers):
    return sum(numbers) / float(len(numbers))

# Calculate standard deviation
def stdev(numbers):
    avg = mean(numbers)
    variance = sum([pow(x - avg, 2) for x in numbers]) / float(len(numbers) - 1)
    return math.sqrt(variance) if variance > 0 else 1e-6  # Avoid zero variance

# Summarize a dataset
def summarize(dataset):
    summaries = [(mean(attribute), stdev(attribute)) for attribute in zip(*dataset)]
    del summaries[-1]  # Remove the class column summary
    return summaries

# Summarize dataset by class
def summarizeByClass(dataset):
    separated = separateByClass(dataset)
    summaries = {classValue: summarize(instances) for classValue, instances in separated.items()}
    return summaries

# Calculate probability using Gaussian formula
def calculateProbability(x, mean, stdev):
    epsilon = 1e-6  # Prevent division by zero
    exponent = math.exp(-(math.pow(x - mean, 2) / (2 * math.pow(stdev + epsilon, 2))))
    return (1 / (math.sqrt(2 * math.pi) * (stdev + epsilon))) * exponent

# Calculate class probabilities for an input
def calculateClassProbabilities(summaries, inputVector):
    probabilities = {}
    for classValue, classSummaries in summaries.items():
        probabilities[classValue] = 1
        for i in range(len(classSummaries)):
            mean, stdev = classSummaries[i]
            x = inputVector[i]
            probabilities[classValue] *= calculateProbability(x, mean, stdev)
    return probabilities

# Predict class for an input vector
def predict(summaries, inputVector):
    probabilities = calculateClassProbabilities(summaries, inputVector)
    bestLabel = max(probabilities, key=probabilities.get)
    return bestLabel

# Get predictions for a dataset
def getPredictions(summaries, testSet):
    return [predict(summaries, test) for test in testSet]

# Calculate accuracy of the model
def getAccuracy(testSet, predictions):
    correct = sum(1 for i in range(len(testSet)) if testSet[i][-1] == predictions[i])
    return (correct / float(len(testSet))) * 100.0

# Main function
def main():
    filename = '5data.csv'
    splitRatio = 0.67  # 67% training data
    dataset = loadCsv(filename)

    # Split the dataset
    trainingSet, testSet = splitDataset(dataset, splitRatio)
    print('Split {0} rows into train={1} and test={2} rows'.format(len(dataset), len(trainingSet), len(testSet)))

    # Summarize the training set
    summaries = summarizeByClass(trainingSet)

    # Test the model
    predictions = getPredictions(summaries, testSet)

    # Calculate accuracy
    accuracy = getAccuracy(testSet, predictions)
    print('Accuracy of the classifier is: {:.2f}%'.format(accuracy))

# Run the main function
main()
